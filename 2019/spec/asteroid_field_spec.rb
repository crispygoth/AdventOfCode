require 'asteroid_field'

describe AsteroidField do
	[
		{ :map => ['.#..#', '.....', '#####', '....#', '...##'], :best => { :x => 3, :y => 4, :visible => 8 } },
		{:best => { :x => 5, :y => 8, :visible => 33 }, :map => [ '......#.#.', '#..#.#....', '..#######.', '.#.#.###..', '.#..#.....', '..#....#.#', '#..#....#.', '.##.#..###', '##...#..#.', '.#....####',]},
		{:best => { :x => 1, :y => 2, :visible => 35 }, :map => [ '#.#...#.#.', '.###....#.', '.#....#...', '##.#.#.#.#', '....#.#.#.', '.##..###.#', '..#...##..', '..##....##', '......#...', '.####.###.',]},
		{:best => { :x => 6, :y => 3, :visible => 41 }, :map => [ '.#..#..###', '####.###.#', '....###.#.', '..###.##.#', '##.##.#.#.', '....###..#', '..#.#..#.#', '#..#.#.###', '.##...##.#', '.....#.#..',]},
		{:best => { :x => 11, :y => 13, :visible => 210 }, :map => [ '.#..##.###...#######', '##.############..##.', '.#.######.########.#', '.###.#######.####.#.', '#####.##.#.##.###.##', '..#####..#.#########', '####################', '#.####....###.#.#.##', '##.#################', '#####.##.###..####..', '..######..##.#######', '####.##.####...##..#', '.#####..#.######.###', '##...#.##########...', '#.##########.#######', '.####.#.###.###.#.##', '....##.##.###..#####', '.#.#.###########.###', '#.#.#.#####.####.###', '###.##.####.##.#..##',]},
	].each.with_index do |test, i|
		describe "given test #{i}" do
			it "finds best #{test[:best].to_s}" do
				expect(AsteroidField.new(test[:map]).max_visible).to include(test[:best])
			end
		end
	end

	describe 'given the big map' do

		af = AsteroidField.new([ '.#..##.###...#######', '##.############..##.', '.#.######.########.#', '.###.#######.####.#.', '#####.##.#.##.###.##', '..#####..#.#########', '####################', '#.####....###.#.#.##', '##.#################', '#####.##.###..####..', '..######..##.#######', '####.##.####...##..#', '.#####..#.######.###', '##...#.##########...', '#.##########.#######', '.####.#.###.###.#.##', '....##.##.###..#####', '.#.#.###########.###', '#.#.#.#####.####.###', '###.##.####.##.#..##',])
		vaporised = af.pew_pew_pew

		it 'has 300 asteroids' do
			expect(af.asteroids.length).to eq(300)
		end

		it 'vaporises 299 asteroids' do
			expect(vaporised.length).to eq(299)
		end

		{
			1 => { :x => 11, :y => 12 },
			2 => { :x => 12, :y => 1 },
			3 => { :x => 12, :y => 2 },
			10 => { :x => 12, :y => 8 },
			20 => { :x => 16, :y => 0 },
			50 => { :x => 16, :y => 9 },
			100 => { :x => 10, :y => 16 },
			199 => { :x => 9, :y => 6 },
			200 => { :x => 8, :y => 2 },
			201 => { :x => 10, :y => 9 },
			299 => { :x => 11, :y => 1 },
		}.each do |n, asteroid|
			it "asteroid #{asteroid.to_s} is number #{n} to be vaporised" do
				expect(vaporised[n - 1]).to include(asteroid)
			end
		end
	end
end
