require 'moon_tracker'

describe MoonTracker do
	describe 'with the first example' do
		it "parses the moons" do
			mt = MoonTracker.new([ '<x=-1, y=0, z=2>', '<x=2, y=-10, z=-7>', '<x=4, y=-8, z=8>', '<x=3, y=5, z=-1>', ])

			expect(mt.moons.map(&:to_h)).to eq([
				{ :x => -1, :y =>   0, :z =>  2, :vx =>  0, :vy =>  0, :vz =>  0 },
				{ :x =>  2, :y => -10, :z => -7, :vx =>  0, :vy =>  0, :vz =>  0 },
				{ :x =>  4, :y =>  -8, :z =>  8, :vx =>  0, :vy =>  0, :vz =>  0 },
				{ :x =>  3, :y =>   5, :z => -1, :vx =>  0, :vy =>  0, :vz =>  0 },
			])
		end

		[
			[
				{ :x => -1, :y =>   0, :z =>  2, :vx =>  0, :vy =>  0, :vz =>  0 },
				{ :x =>  2, :y => -10, :z => -7, :vx =>  0, :vy =>  0, :vz =>  0 },
				{ :x =>  4, :y =>  -8, :z =>  8, :vx =>  0, :vy =>  0, :vz =>  0 },
				{ :x =>  3, :y =>   5, :z => -1, :vx =>  0, :vy =>  0, :vz =>  0 },
			],
			[
				{ :x =>  2, :y => -1, :z =>  1, :vx =>  3, :vy => -1, :vz => -1 },
				{ :x =>  3, :y => -7, :z => -4, :vx =>  1, :vy =>  3, :vz =>  3 },
				{ :x =>  1, :y => -7, :z =>  5, :vx => -3, :vy =>  1, :vz => -3 },
				{ :x =>  2, :y =>  2, :z =>  0, :vx => -1, :vy => -3, :vz =>  1 },
			],
			[
				{ :x =>  5, :y => -3, :z => -1, :vx =>  3, :vy => -2, :vz => -2 },
				{ :x =>  1, :y => -2, :z =>  2, :vx => -2, :vy =>  5, :vz =>  6 },
				{ :x =>  1, :y => -4, :z => -1, :vx =>  0, :vy =>  3, :vz => -6 },
				{ :x =>  1, :y => -4, :z =>  2, :vx => -1, :vy => -6, :vz =>  2 },

			],
			[
				{ :x =>  5, :y => -6, :z => -1, :vx =>  0, :vy => -3, :vz =>  0 },
				{ :x =>  0, :y =>  0, :z =>  6, :vx => -1, :vy =>  2, :vz =>  4 },
				{ :x =>  2, :y =>  1, :z => -5, :vx =>  1, :vy =>  5, :vz => -4 },
				{ :x =>  1, :y => -8, :z =>  2, :vx =>  0, :vy => -4, :vz =>  0 },

			],
			[
				{ :x =>  2, :y => -8, :z =>  0, :vx => -3, :vy => -2, :vz =>  1 },
				{ :x =>  2, :y =>  1, :z =>  7, :vx =>  2, :vy =>  1, :vz =>  1 },
				{ :x =>  2, :y =>  3, :z => -6, :vx =>  0, :vy =>  2, :vz => -1 },
				{ :x =>  2, :y => -9, :z =>  1, :vx =>  1, :vy => -1, :vz => -1 },
			],
			[
				{ :x => -1, :y => -9, :z =>  2, :vx => -3, :vy => -1, :vz =>  2 },
				{ :x =>  4, :y =>  1, :z =>  5, :vx =>  2, :vy =>  0, :vz => -2 },
				{ :x =>  2, :y =>  2, :z => -4, :vx =>  0, :vy => -1, :vz =>  2 },
				{ :x =>  3, :y => -7, :z => -1, :vx =>  1, :vy =>  2, :vz => -2 },
			],
			[
				{ :x => -1, :y => -7, :z =>  3, :vx =>  0, :vy =>  2, :vz =>  1 },
				{ :x =>  3, :y =>  0, :z =>  0, :vx => -1, :vy => -1, :vz => -5 },
				{ :x =>  3, :y => -2, :z =>  1, :vx =>  1, :vy => -4, :vz =>  5 },
				{ :x =>  3, :y => -4, :z => -2, :vx =>  0, :vy =>  3, :vz => -1 },
			],
			[
				{ :x =>  2, :y => -2, :z =>  1, :vx =>  3, :vy =>  5, :vz => -2 },
				{ :x =>  1, :y => -4, :z => -4, :vx => -2, :vy => -4, :vz => -4 },
				{ :x =>  3, :y => -7, :z =>  5, :vx =>  0, :vy => -5, :vz =>  4 },
				{ :x =>  2, :y =>  0, :z =>  0, :vx => -1, :vy =>  4, :vz =>  2 },
			],
			[
				{ :x =>  5, :y =>  2, :z => -2, :vx =>  3, :vy =>  4, :vz => -3 },
				{ :x =>  2, :y => -7, :z => -5, :vx =>  1, :vy => -3, :vz => -1 },
				{ :x =>  0, :y => -9, :z =>  6, :vx => -3, :vy => -2, :vz =>  1 },
				{ :x =>  1, :y =>  1, :z =>  3, :vx => -1, :vy =>  1, :vz =>  3 },
			],
			[
				{ :x =>  5, :y =>  3, :z => -4, :vx =>  0, :vy =>  1, :vz => -2 },
				{ :x =>  2, :y => -9, :z => -3, :vx =>  0, :vy => -2, :vz =>  2 },
				{ :x =>  0, :y => -8, :z =>  4, :vx =>  0, :vy =>  1, :vz => -2 },
				{ :x =>  1, :y =>  1, :z =>  5, :vx =>  0, :vy =>  0, :vz =>  2 },
			],
			[
				{ :x =>  2, :y =>  1, :z => -3, :vx => -3, :vy => -2, :vz =>  1 },
				{ :x =>  1, :y => -8, :z =>  0, :vx => -1, :vy =>  1, :vz =>  3 },
				{ :x =>  3, :y => -6, :z =>  1, :vx =>  3, :vy =>  2, :vz => -3 },
				{ :x =>  2, :y =>  0, :z =>  4, :vx =>  1, :vy => -1, :vz => -1 },
			]
		].each.with_index do |test, step|
			test.each.with_index do |exp,n |
				it "after #{step} steps, moon #{n}" do
					mt = MoonTracker.new([ '<x=-1, y=0, z=2>', '<x=2, y=-10, z=-7>', '<x=4, y=-8, z=8>', '<x=3, y=5, z=-1>', ])
					step.times { mt.time_step }

					expect(mt.moons[n].to_h).to include(exp)
				end
			end
		end

		it "total energy after 10 steps" do
			mt = MoonTracker.new([ '<x=-1, y=0, z=2>', '<x=2, y=-10, z=-7>', '<x=4, y=-8, z=8>', '<x=3, y=5, z=-1>', ])
			10.times { mt.time_step }
			expect(mt.total_energy).to eq(179)
		end

		it "finds a repeat after 2772 steps" do
			mt = MoonTracker.new([ '<x=-1, y=0, z=2>', '<x=2, y=-10, z=-7>', '<x=4, y=-8, z=8>', '<x=3, y=5, z=-1>', ])
			expect(mt.find_repeat).to eq(2772)
		end
	end

	describe 'with the second example' do
		[
			[
				{ :x =>  -8, :y => -10, :z =>   0, :vx =>   0, :vy =>   0, :vz =>   0 },
				{ :x =>   5, :y =>   5, :z =>  10, :vx =>   0, :vy =>   0, :vz =>   0 },
				{ :x =>   2, :y =>  -7, :z =>   3, :vx =>   0, :vy =>   0, :vz =>   0 },
				{ :x =>   9, :y =>  -8, :z =>  -3, :vx =>   0, :vy =>   0, :vz =>   0 },

			],
			[
				{ :x =>  -9, :y => -10, :z =>   1, :vx =>  -2, :vy =>  -2, :vz =>  -1 },
				{ :x =>   4, :y =>  10, :z =>   9, :vx =>  -3, :vy =>   7, :vz =>  -2 },
				{ :x =>   8, :y => -10, :z =>  -3, :vx =>   5, :vy =>  -1, :vz =>  -2 },
				{ :x =>   5, :y => -10, :z =>   3, :vx =>   0, :vy =>  -4, :vz =>   5 },

			],
			[
				{ :x => -10, :y =>   3, :z =>  -4, :vx =>  -5, :vy =>   2, :vz =>   0 },
				{ :x =>   5, :y => -25, :z =>   6, :vx =>   1, :vy =>   1, :vz =>  -4 },
				{ :x =>  13, :y =>   1, :z =>   1, :vx =>   5, :vy =>  -2, :vz =>   2 },
				{ :x =>   0, :y =>   1, :z =>   7, :vx =>  -1, :vy =>  -1, :vz =>   2 },

			],
			[
				{ :x =>  15, :y =>  -6, :z =>  -9, :vx =>  -5, :vy =>   4, :vz =>   0 },
				{ :x =>  -4, :y => -11, :z =>   3, :vx =>  -3, :vy => -10, :vz =>   0 },
				{ :x =>   0, :y =>  -1, :z =>  11, :vx =>   7, :vy =>   4, :vz =>   3 },
				{ :x =>  -3, :y =>  -2, :z =>   5, :vx =>   1, :vy =>   2, :vz =>  -3 },

			],
			[
				{ :x =>  14, :y => -12, :z =>  -4, :vx =>  11, :vy =>   3, :vz =>   0 },
				{ :x =>  -1, :y =>  18, :z =>   8, :vx =>  -5, :vy =>   2, :vz =>   3 },
				{ :x =>  -5, :y => -14, :z =>   8, :vx =>   1, :vy =>  -2, :vz =>   0 },
				{ :x =>   0, :y => -12, :z =>  -2, :vx =>  -7, :vy =>  -3, :vz =>  -3 },

			],
			[
				{ :x => -23, :y =>   4, :z =>   1, :vx =>  -7, :vy =>  -1, :vz =>   2 },
				{ :x =>  20, :y => -31, :z =>  13, :vx =>   5, :vy =>   3, :vz =>   4 },
				{ :x =>  -4, :y =>   6, :z =>   1, :vx =>  -1, :vy =>   1, :vz =>  -3 },
				{ :x =>  15, :y =>   1, :z =>  -5, :vx =>   3, :vy =>  -3, :vz =>  -3 },

			],
			[
				{ :x =>  36, :y => -10, :z =>   6, :vx =>   5, :vy =>   0, :vz =>   3 },
				{ :x => -18, :y =>  10, :z =>   9, :vx =>  -3, :vy =>  -7, :vz =>   5 },
				{ :x =>   8, :y => -12, :z =>  -3, :vx =>  -2, :vy =>   1, :vz =>  -7 },
				{ :x => -18, :y =>  -8, :z =>  -2, :vx =>   0, :vy =>   6, :vz =>  -1 },

			],
			[
				{ :x => -33, :y =>  -6, :z =>   5, :vx =>  -5, :vy =>  -4, :vz =>   7 },
				{ :x =>  13, :y =>  -9, :z =>   2, :vx =>  -2, :vy =>  11, :vz =>   3 },
				{ :x =>  11, :y =>  -8, :z =>   2, :vx =>   8, :vy =>  -6, :vz =>  -7 },
				{ :x =>  17, :y =>   3, :z =>   1, :vx =>  -1, :vy =>  -1, :vz =>  -3 },

			],
			[
				{ :x =>  30, :y =>  -8, :z =>   3, :vx =>   3, :vy =>   3, :vz =>   0 },
				{ :x =>  -2, :y =>  -4, :z =>   0, :vx =>   4, :vy => -13, :vz =>   2 },
				{ :x => -18, :y =>  -7, :z =>  15, :vx =>  -8, :vy =>   2, :vz =>  -2 },
				{ :x =>  -2, :y =>  -1, :z =>  -8, :vx =>   1, :vy =>   8, :vz =>   0 },

			],
			[
				{ :x => -25, :y =>  -1, :z =>   4, :vx =>   1, :vy =>  -3, :vz =>   4 },
				{ :x =>   2, :y =>  -9, :z =>   0, :vx =>  -3, :vy =>  13, :vz =>  -1 },
				{ :x =>  32, :y =>  -8, :z =>  14, :vx =>   5, :vy =>  -4, :vz =>   6 },
				{ :x =>  -1, :y =>  -2, :z =>  -8, :vx =>  -3, :vy =>  -6, :vz =>  -9 },

			],
			[
				{ :x =>   8, :y => -12, :z =>  -9, :vx =>  -7, :vy =>   3, :vz =>   0 },
				{ :x =>  13, :y =>  16, :z =>  -3, :vx =>   3, :vy => -11, :vz =>  -5 },
				{ :x => -29, :y => -11, :z =>  -1, :vx =>  -3, :vy =>   7, :vz =>   4 },
				{ :x =>  16, :y => -13, :z =>  23, :vx =>   7, :vy =>   1, :vz =>   1 },
			]
		].each.with_index do |test, step_ten|
			step = step_ten * 10
			test.each.with_index do |exp, n|
				it "after #{step} steps, moon #{n}" do
					mt = MoonTracker.new([ '<x=-8, y=-10, z=0>', '<x=5, y=5, z=10>', '<x=2, y=-7, z=3>', '<x=9, y=-8, z=-3>'])
					step.times { mt.time_step }

					expect(mt.moons[n].to_h).to include(exp)
				end
			end
		end

		it "total energy after 100 steps" do
			mt = MoonTracker.new([ '<x=-8, y=-10, z=0>', '<x=5, y=5, z=10>', '<x=2, y=-7, z=3>', '<x=9, y=-8, z=-3>'])
			100.times { mt.time_step }
			expect(mt.total_energy).to eq(1940)
		end

		it "finds a repeat after 4686774924 steps" do
			mt = MoonTracker.new([ '<x=-8, y=-10, z=0>', '<x=5, y=5, z=10>', '<x=2, y=-7, z=3>', '<x=9, y=-8, z=-3>'])
			expect(mt.find_repeat).to eq(4686774924)
		end
	end
end
